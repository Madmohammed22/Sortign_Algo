void merge(int arr[], int l, int m, int r);
void MergeSort(int arr[], int l, int r);
void printArray(int arr[], int length);
int main()
{

    int arr[] = {38, 27, 43, 3, 9, 82, 10};
    int length = sizeof(arr) / sizeof(int);
    MergeSort(arr, 0, length - 1);
    printArray(arr, length);
    return (0);
}

void merge(int arr[], int l, int m, int r)
{
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    int i = 0;
    while (i < n1)
    {
        L[i] = arr[l + i];
        i++;
    }

    int j = 0;
    while (j < n2)
    {
        R[j] = arr[m + 1 + j];
        j++;
    }

    int k = l;
    i = 0;
    j = 0;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void MergeSort(int arr[], int l, int r)
{

    if (l < r)
    {
        int m = l + (r - l) / 2;
        MergeSort(arr, l, m);
        MergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void printArray(int arr[], int length)
{
    int i = 0;
    while (i < length)
    {
        printf("%d\t", arr[i]);
        i++;
    }
    printf("\n");
}